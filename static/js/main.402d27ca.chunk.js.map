{"version":3,"sources":["services/DownloadService.ts","components/KonvaVideo/KonvaVideo.tsx","filters/ColorMatrixFilter.ts","components/KonvaVideo/helpers.ts","containers/EditorContainer.tsx","services/MediaStreamService.ts","components/ImageInput/ImageInput.tsx","components/MediaSelector/MediaSelector.tsx","App.tsx","useApp.tsx","serviceWorker.ts","index.tsx"],"names":["uri","parse","slice","split","pop","Error","binStr","window","atob","l","length","array","Uint8Array","i","charCodeAt","Blob","type","base64","filename","blob","this","_base64ToBlob","url","URL","createObjectURL","a","document","createElement","href","download","Date","now","click","revokeObjectURL","COLOR_MATRIX_FILTER","matrix","imageData","buf","data","n","R","G","B","A","ColorMatrix","forwardRef","props","ref","stream","x","y","width","height","selected","onSelect","trRef","React","useRef","_videoRef","_animationRef","_pauseRef","useState","position","setPosition","size","setSize","_handleOnCheckSize","useCallback","e","target","maxWidth","maxHeight","ratio","resizeContain","videoWidth","videoHeight","_handleOnDragEnd","_handleOnSelect","_video","useMemo","video","muted","autoplay","setAttribute","srcObject","play","createVideoElement","addEventListener","useEffect","current","videoCurrent","setNode","getLayer","batchDraw","animation","Konva","Animation","layer","cache","start","stop","useImperativeHandle","toggle","filters","image","draggable","onDragEnd","onClick","DEFAULT_VIDEO_SIZE","EditorContainer","_stageRef","selectedId","setSelectedId","_handleOnMouseLeave","undefined","_handleOnMouseDown","getStage","attrs","unselectable","id","_handleOnPause","_handleOnExport","stage","toDataURL","DownloadService","className","onMouseLeave","onMouseDown","disabled","navigator","mediaDevices","getUserMedia","audio","getTracks","forEach","track","videoStreamId","constraints","deviceId","ideal","frameRate","min","facingMode","readImage","file","Promise","resolve","reject","reader","FileReader","result","readAsDataURL","ImageInput","onChange","_handleOnChange","files","Image","src","complete","accept","MediaSelector","errorMessage","onInit","devices","setDevices","currentDeviceId","setCurrentDeviceId","_deviceTable","Map","_handleOnLoadDevices","enumerateDevices","filteredDevices","filter","device","kind","set","targetDevice","find","get","_handleOnChangeDevice","value","deviceInfo","options","map","key","label","push","App","initialized","setInitialized","available","setAvailable","_initialLoadDevice","MediaStreamService","checkVideoStream","alert","_loadDevice","getVideoStream","loadDevice","useApp","setImage","setDeviceId","setStream","_handleOnChangeVideo","info","_handleOnChangeImage","_handleOnLoadDevice","then","_stream","Boolean","location","hostname","match","ReactDOM","render","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.402d27ca.chunk.js","sourcesContent":["class DownloadService {\r\n  _base64ToBlob(uri: string) {\r\n    const parse = uri.slice(5).split(/[,;]/).pop()\r\n    if (!parse) throw new Error('base64 parse error')\r\n    const binStr = window.atob(parse)\r\n    const l = binStr.length\r\n    const array = new Uint8Array(l)\r\n    for (let i = 0; i < l; i++) {\r\n      array[i] = binStr.charCodeAt(i)\r\n    }\r\n    return new Blob([array], { type: parse[0] })\r\n  }\r\n  download(base64: string, filename: string = '') {\r\n    const blob = this._base64ToBlob(base64)\r\n    const url = URL.createObjectURL(blob)\r\n    const a = document.createElement('a')\r\n    a.href = url\r\n    a.download = filename ? `${filename}.png` : `capture-${Date.now()}.png`\r\n    a.click()\r\n    URL.revokeObjectURL(url)\r\n  }\r\n}\r\n\r\nexport default new DownloadService()\r\n","import Konva from 'konva'\r\nimport { KonvaEventObject } from 'konva/types/Node'\r\nimport React, { forwardRef, useCallback, useEffect, useImperativeHandle, useMemo, useRef, useState } from 'react'\r\nimport { Image, Transformer } from 'react-konva'\r\nimport ColorMatrix from '../../filters/ColorMatrixFilter'\r\nimport { createVideoElement, resizeContain } from './helpers'\r\n\r\nconst GREENBACK_MATRIX = [\r\n  [ 1.0,  0.0, 0.0, 0.0, 0.0 ],\r\n  [ 0.0,  1.0, 0.0, 0.0, 0.0 ],\r\n  [ 0.0,  0.0, 1.0, 0.0, 0.0 ],\r\n  [ 3.0, -3.0, 1.0, 1.0, 0.0 ]\r\n]\r\nconst COLOR_MATRIX_FILTER = ColorMatrix(GREENBACK_MATRIX)\r\ninterface Props {\r\n  stream: MediaStream | null\r\n  x: number\r\n  y: number\r\n  width: number\r\n  height: number\r\n  selected: boolean\r\n  onSelect: () => void\r\n}\r\nexport interface KonvaVideoHandler {\r\n  start(): void\r\n  stop(): void\r\n  toggle(): boolean\r\n}\r\nconst KonvaVideo: React.RefForwardingComponent<KonvaVideoHandler, Props> = (props, ref) => {\r\n  const {\r\n    stream,\r\n    x,\r\n    y,\r\n    width,\r\n    height,\r\n    selected,\r\n    onSelect,\r\n  } = props\r\n  const trRef = React.useRef<any>()\r\n  const _videoRef = useRef<Konva.Image>(null)\r\n  const _animationRef = useRef<Konva.Animation>()\r\n  const _pauseRef = useRef(false)\r\n  const [position, setPosition] = useState<{ x: number, y: number }>({ x, y })\r\n  const [size, setSize] = useState<{ width: number, height: number }>({ width, height })\r\n  const _handleOnCheckSize = useCallback((e: Event) => {\r\n    const target = e.target as HTMLVideoElement\r\n    const size = resizeContain(target.videoWidth, target.videoHeight, width, height)\r\n    setSize(size)\r\n  }, [width, height])\r\n  const _handleOnDragEnd = useCallback((e: Konva.KonvaEventObject<DragEvent>) => {\r\n    setPosition({\r\n      x: e.target.x(),\r\n      y: e.target.y()\r\n    })\r\n  }, [])\r\n  const _handleOnSelect = useCallback((e: KonvaEventObject<MouseEvent>) => {\r\n    onSelect()\r\n  }, [onSelect])\r\n  const _video = useMemo(() => {\r\n    const video: HTMLVideoElement = createVideoElement(stream)\r\n    video.addEventListener('canplay', _handleOnCheckSize)\r\n    return video\r\n  }, [stream, _handleOnCheckSize])\r\n  useEffect(() => {\r\n    const current = trRef.current\r\n    const videoCurrent = _videoRef.current\r\n    if (selected && current && videoCurrent) {\r\n      current.setNode(videoCurrent);\r\n      current.getLayer().batchDraw();\r\n    }\r\n  }, [trRef, _videoRef, selected])\r\n  useEffect(() => {\r\n    const current = _videoRef.current\r\n    if (current) {\r\n      const animation = new Konva.Animation(() => {\r\n        if (current.width() !== 0 && current.height() !== 0) {\r\n          const layer = current.getLayer()\r\n          if (layer) layer.batchDraw()\r\n          current.cache()\r\n        }\r\n      }, current)\r\n      if (!_pauseRef.current) {\r\n        animation.start()\r\n        _pauseRef.current = false\r\n      }\r\n      _animationRef.current = animation\r\n      return () => {\r\n        animation.stop()\r\n      }\r\n    }\r\n  }, [_videoRef, _animationRef, _pauseRef,  width, height])\r\n  useImperativeHandle(ref, () => {\r\n    return {\r\n      start() {\r\n        if (_animationRef.current) {\r\n          _animationRef.current.start()\r\n        }\r\n      },\r\n      stop() {\r\n        if (_animationRef.current) {\r\n          _animationRef.current.stop()\r\n        }\r\n      },\r\n      toggle() {\r\n        _pauseRef.current = !_pauseRef.current\r\n        if (_animationRef.current) {\r\n          if (_pauseRef.current) {\r\n            _animationRef.current.stop()\r\n          } else {\r\n            _animationRef.current.start()\r\n          }\r\n        }\r\n        return _pauseRef.current\r\n      }\r\n    }\r\n  }, [_animationRef])\r\n  return (\r\n    <>\r\n      <Image\r\n        filters={[COLOR_MATRIX_FILTER]}\r\n        x={position.x}\r\n        y={position.y}\r\n        width={size.width}\r\n        height={size.height}\r\n        image={_video}\r\n        ref={_videoRef}\r\n        draggable\r\n        onDragEnd={_handleOnDragEnd}\r\n        onClick={_handleOnSelect}\r\n      />\r\n      { selected && <Transformer ref={trRef} /> }\r\n    </>\r\n  )\r\n}\r\nexport default forwardRef(KonvaVideo)\r\n","import { Filter } from 'konva/types/Node'\r\nconst ColorMatrix: (matrix: number[][]) => Filter = matrix => imageData => {\r\n  const buf = imageData.data\r\n  for (let i = 0, n = buf.length; i < n; i += 4){\r\n    const R = buf[i];\r\n    const G = buf[i + 1];\r\n    const B = buf[i + 2];\r\n    const A = buf[i + 3];\r\n    buf[i]   = matrix[0][0] * R + matrix[0][1] * G + matrix[0][2] * B + matrix[0][3] * A + matrix[0][4] * 255;\r\n    buf[i+1] = matrix[1][0] * R + matrix[1][1] * G + matrix[1][2] * B + matrix[1][3] * A + matrix[1][4] * 255;\r\n    buf[i+2] = matrix[2][0] * R + matrix[2][1] * G + matrix[2][2] * B + matrix[2][3] * A + matrix[2][4] * 255;\r\n    buf[i+3] = matrix[3][0] * R + matrix[3][1] * G + matrix[3][2] * B + matrix[3][3] * A + matrix[3][4] * 255;\r\n  }\r\n}\r\nexport default ColorMatrix\r\n","export function resizeContain(width: number, height: number, maxWidth: number, maxHeight: number) {\r\n  const size = {\r\n    width,\r\n    height\r\n  }\r\n  if(size.width > maxWidth){\r\n    const ratio = maxWidth / size.width\r\n    size.height = size.height * ratio\r\n    size.width = size.width * ratio\r\n  }\r\n  if(size.height > maxHeight){\r\n    const ratio = maxHeight / size.height\r\n    size.width = size.width * ratio\r\n    size.height = size.height * ratio\r\n  }\r\n  return size\r\n}\r\nexport function createVideoElement(stream: MediaStream | null) {\r\n  const video: HTMLVideoElement = document.createElement('video')\r\n  video.muted = true\r\n  video.autoplay = true\r\n  video.setAttribute('playsinline', 'true')\r\n  video.srcObject = stream || null\r\n  video.play()\r\n  return video\r\n}\r\n","import { KonvaEventObject } from 'konva/types/Node'\r\nimport React, { useCallback, useMemo, useRef, useState } from 'react'\r\nimport { Image, Layer, Stage, StageProps } from 'react-konva'\r\nimport DownloadService from '../services/DownloadService'\r\nimport KonvaVideo, { KonvaVideoHandler } from '../components/KonvaVideo/KonvaVideo'\r\n\r\nconst DEFAULT_VIDEO_SIZE = {\r\n  width: 320,\r\n  height: 240\r\n}\r\n\r\ninterface Props {\r\n  image: HTMLImageElement | null\r\n  stream: MediaStream | null\r\n}\r\nexport const EditorContainer: React.FC<Props> = props => {\r\n  const {\r\n    image,\r\n    stream,\r\n  } = props\r\n  const _stageRef = useRef<Stage & StageProps>(null)\r\n  const _videoRef = useRef<KonvaVideoHandler>(null)\r\n  const [selectedId, setSelectedId] = useState<string>()\r\n  const size = useMemo(() => {\r\n    return {\r\n      width: image ? image.width : 0,\r\n      height: image ? image.height : 0\r\n    }\r\n  }, [image])\r\n  const _handleOnMouseLeave = useCallback(() => {\r\n    setSelectedId(undefined)\r\n  }, [])\r\n  const _handleOnMouseDown = useCallback((e: KonvaEventObject<MouseEvent>) => {\r\n    const clickedOnEmpty = e.target === e.target.getStage() || e.target.attrs.unselectable\r\n    if (clickedOnEmpty) {\r\n      setSelectedId(undefined)\r\n    }\r\n  }, [])\r\n  const _handleOnSelect = useCallback((id: string) => () => {\r\n    setSelectedId(id)\r\n  }, [])\r\n  const _handleOnPause = useCallback(() => {\r\n    if (_videoRef.current) {\r\n      _videoRef.current.toggle()\r\n    }\r\n  }, [_videoRef])\r\n  const _handleOnExport = useCallback(() => {\r\n    const stage = _stageRef.current\r\n    if (stage) {\r\n      const data = stage.toDataURL()\r\n      DownloadService.download(data)\r\n    }\r\n  }, [_stageRef])\r\n  const _video = useMemo(() => {\r\n    if (!image || size.width === 0 || size.height === 0) return\r\n    return (\r\n      <KonvaVideo\r\n        ref={_videoRef}\r\n        selected={selectedId === 'camera'}\r\n        x={0}\r\n        y={0}\r\n        width={DEFAULT_VIDEO_SIZE.width}\r\n        height={DEFAULT_VIDEO_SIZE.height}\r\n        stream={stream}\r\n        onSelect={_handleOnSelect('camera')}\r\n      />\r\n    )\r\n  }, [image, size, stream, selectedId, _handleOnSelect])\r\n  return (\r\n    <div className=\"editor-container\">\r\n      <div className=\"editor\" onMouseLeave={_handleOnMouseLeave}>\r\n        <Stage className=\"editor-layer\" width={size.width} height={size.height} onMouseDown={_handleOnMouseDown} ref={_stageRef}>\r\n          <Layer>\r\n            <Image\r\n              unselectable\r\n              x={0}\r\n              y={0}\r\n              width={size.width}\r\n              height={size.height}\r\n              image={image || undefined}\r\n            />\r\n            {_video}\r\n          </Layer>\r\n        </Stage>\r\n      </div>\r\n      <footer className=\"editor-footer\">\r\n        <button type=\"button\" onClick={_handleOnPause} disabled={!(!!_video)}>一時停止</button>\r\n        <button type=\"button\" onClick={_handleOnExport} disabled={!(!!_video)}>保存</button>\r\n      </footer>\r\n    </div>\r\n  )\r\n}\r\n","class MediaStreamService {\r\n  async checkVideoStream() {\r\n    const stream = await navigator.mediaDevices.getUserMedia({\r\n      video: true,\r\n      audio: false\r\n    })\r\n    stream.getTracks().forEach(track => {\r\n      track.stop()\r\n    })\r\n    return true\r\n  }\r\n  getVideoStream(videoStreamId: string) {\r\n    const constraints = {\r\n      video: {\r\n        deviceId: videoStreamId,\r\n        width: {\r\n          ideal: 1024\r\n        },\r\n        height: {\r\n          ideal: 768\r\n        },\r\n        frameRate: {\r\n          ideal: 60,\r\n          min: 20\r\n        },\r\n        facingMode: 'user',\r\n      },\r\n      audio: false\r\n    }\r\n    return navigator.mediaDevices.getUserMedia(constraints)\r\n  }\r\n}\r\nexport default new MediaStreamService()\r\n","import React, { ChangeEvent, useCallback } from 'react'\r\ninterface Props {\r\n  onChange: (img: HTMLImageElement | null) => void\r\n}\r\nconst readImage = async (file: File): Promise<string> => {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader()\r\n    reader.addEventListener('load', () => {\r\n      resolve(reader.result as string)\r\n    })\r\n    reader.addEventListener('error', (e) => {\r\n      reject(e)\r\n    })\r\n    reader.readAsDataURL(file)\r\n  })\r\n}\r\nconst ImageInput: React.FC<Props> = props => {\r\n  const {\r\n    onChange\r\n  } = props\r\n  const _handleOnChange = useCallback(async(e: ChangeEvent<HTMLInputElement>) => {\r\n    if (e.target.files) {\r\n      const url = await readImage(e.target.files[0])\r\n      const image = new Image()\r\n      image.src = url\r\n      if (image.complete) {\r\n        onChange(image)\r\n      } else {\r\n        image.addEventListener('load', () => {\r\n          onChange(image)\r\n        })\r\n      }\r\n    } else {\r\n      onChange(null)\r\n    }\r\n  }, [onChange])\r\n  return (\r\n    <input\r\n      type=\"file\"\r\n      accept=\"image/*\"\r\n      onChange={_handleOnChange}\r\n    />\r\n  )\r\n}\r\nexport default ImageInput\r\n","import React, { ChangeEvent, useCallback, useEffect, useMemo, useState } from 'react'\r\n\r\ninterface Props {\r\n  onInit?(info: MediaDeviceInfo | undefined): void;\r\n  onChange?(info: MediaDeviceInfo | undefined): void;\r\n  type?: 'videoinput' | 'audioinput' | 'audiooutput'\r\n  errorMessage?: '-'\r\n  deviceId: string | undefined\r\n  disabled?: boolean\r\n}\r\n\r\nconst MediaSelector: React.FC<Props> = props => {\r\n  const {\r\n    deviceId = 'deviceId',\r\n    type = 'audioinput',\r\n    disabled = false,\r\n    errorMessage = '-',\r\n    onInit,\r\n    onChange\r\n  } = props\r\n\r\n  const [devices, setDevices] = useState<MediaDeviceInfo[]>([])\r\n  const [currentDeviceId, setCurrentDeviceId] = useState<string>(deviceId)\r\n  const _deviceTable: Map<string, MediaDeviceInfo> = useMemo( () => new Map(), [])\r\n  const _handleOnLoadDevices = useCallback(async() => {\r\n    const devices = await navigator.mediaDevices.enumerateDevices()\r\n    const filteredDevices = devices.filter(device => {\r\n      return (device.kind === type)\r\n    })\r\n    filteredDevices.forEach((device: MediaDeviceInfo) => {\r\n      _deviceTable.set(device.deviceId, device)\r\n    })\r\n    let currentDeviceId = filteredDevices[0] ? filteredDevices[0].deviceId : 'default'\r\n    const targetDevice = filteredDevices.find(device => {\r\n      return device.deviceId === deviceId\r\n    })\r\n    if (targetDevice) {\r\n      currentDeviceId = targetDevice.deviceId\r\n    }\r\n    setDevices(filteredDevices)\r\n    setCurrentDeviceId(currentDeviceId)\r\n\r\n    if (onInit) {\r\n      onInit(_deviceTable.get(currentDeviceId))\r\n    }\r\n  }, [_deviceTable, type, deviceId, onInit])\r\n  useEffect(() => {\r\n    _handleOnLoadDevices()\r\n  }, [_handleOnLoadDevices])\r\n  useEffect(() => {\r\n    setCurrentDeviceId(deviceId)\r\n  }, [deviceId])\r\n  const _handleOnChangeDevice = useCallback((e: ChangeEvent<HTMLSelectElement>) => {\r\n    const deviceId = e.target.value\r\n    const deviceInfo = _deviceTable.get(deviceId)\r\n    if (deviceInfo) {\r\n      setCurrentDeviceId(deviceId)\r\n      if (onChange) {\r\n        onChange(deviceInfo)\r\n      }\r\n    } else if (onChange) {\r\n      onChange(undefined)\r\n    }\r\n  }, [onChange, _deviceTable])\r\n\r\n  const options = useMemo(() => {\r\n    return devices.map((device: MediaDeviceInfo) => {\r\n      return <option value={device.deviceId} key={device.deviceId}>{device.label}</option>\r\n    })\r\n  }, [devices])\r\n  if (options.length === 0) {\r\n    options.push(<option value=\"default\" key={0}>{errorMessage}</option>)\r\n  }\r\n  return (\r\n    <select value={currentDeviceId} onChange={_handleOnChangeDevice} disabled={disabled}>\r\n      {options}\r\n    </select>\r\n  )\r\n}\r\nexport default MediaSelector\r\n","import React, { useCallback, useEffect, useState } from 'react'\r\nimport { EditorContainer } from './containers/EditorContainer'\r\nimport { useApp } from './useApp'\r\nimport ImageInput from './components/ImageInput/ImageInput'\r\nimport MediaSelector from './components/MediaSelector/MediaSelector'\r\nimport './App.css'\r\n\r\nconst App: React.FC = () => {\r\n  const {\r\n    initialized,\r\n    available,\r\n    loadDevice,\r\n  } = useApp()\r\n  const [image, setImage] = useState<HTMLImageElement | null>(null)\r\n  const [deviceId, setDeviceId] = useState<string | undefined>()\r\n  const [stream, setStream] = useState<MediaStream | null>(null)\r\n  const _handleOnChangeVideo = useCallback(async (info: MediaDeviceInfo | undefined) => {\r\n    if (info) {\r\n      setDeviceId(info.deviceId)\r\n    } else {\r\n      setDeviceId(undefined)\r\n    }\r\n  }, [])\r\n  const _handleOnChangeImage = useCallback((image: HTMLImageElement | null) => {\r\n    setImage(image)\r\n  }, [])\r\n  const _handleOnLoadDevice = useCallback(() => {\r\n    if (deviceId) {\r\n      loadDevice(deviceId).then(stream => {\r\n        setStream(stream)\r\n      }, e => {\r\n        alert(e)\r\n      })\r\n    } else {\r\n      setStream(null)\r\n    }\r\n  }, [deviceId, loadDevice])\r\n  useEffect(() => {\r\n    const _stream = stream\r\n    return () => {\r\n      if (_stream) {\r\n        _stream.getTracks().forEach(track => {\r\n          track.stop()\r\n        })\r\n      }\r\n    }\r\n  }, [stream])\r\n  if (!initialized) {\r\n    return <div className=\"loading\">Loading...</div>\r\n  }\r\n  if (!available) {\r\n    return <div className=\"error\">カメラへのアクセスができませんでした</div>\r\n  }\r\n  return (\r\n    <div className=\"app\">\r\n      <header className=\"header\">\r\n        <div className=\"header-form\">\r\n          <ImageInput onChange={_handleOnChangeImage}/>\r\n          <MediaSelector\r\n            type=\"videoinput\"\r\n            deviceId={deviceId}\r\n            onChange={_handleOnChangeVideo}\r\n          />\r\n          <button onClick={_handleOnLoadDevice}>カメラ取り込み</button>\r\n        </div>\r\n      </header>\r\n      <EditorContainer\r\n        image={image}\r\n        stream={stream}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import { useCallback, useEffect, useState } from 'react'\r\nimport MediaStreamService from './services/MediaStreamService'\r\n\r\nexport const useApp = () => {\r\n  const [initialized, setInitialized] = useState(false)\r\n  const [available, setAvailable] = useState(false)\r\n  const _initialLoadDevice = useCallback(async() => {\r\n    try {\r\n      const result = await MediaStreamService.checkVideoStream()\r\n      setAvailable(result)\r\n    } catch(e) {\r\n      alert(e)\r\n      setAvailable(false)\r\n    } finally {\r\n      setInitialized(true)\r\n    }\r\n  }, [])\r\n  const _loadDevice = useCallback(async (deviceId: string) => {\r\n    return MediaStreamService.getVideoStream(deviceId)\r\n  }, [])\r\n  useEffect(() => {\r\n    _initialLoadDevice()\r\n  }, [_initialLoadDevice])\r\n  return {\r\n    initialized,\r\n    available,\r\n    loadDevice: _loadDevice\r\n  }\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}